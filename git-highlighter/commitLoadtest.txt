  /*  //const commitListViewProvider = new CommitListViewProvider();
    //vscode.window.registerTreeDataProvider('CommitView', commitListViewProvider);
    //// Register your command here
    //`//vscode.commands.executeCommand('gmap.testCommit', { commitMessage: 'Test' });

    const commitListViewProvider = new CommitListViewProvider();
    const treeView = vscode.window.createTreeView('CommitView', {
      treeDataProvider: commitListViewProvider,
    });

    // Save reference to treeView for later
    context.subscriptions.push(treeView);

    vscode.commands.registerCommand('gmap.testCommit', (commitItem) => {
        debugLog(`You clicked commit1: ${commitItem.commitMessage}`);
        vscode.window.showInformationMessage(`You clicked commit: ${commitItem.commitMessage}`);

    });
    commitListViewProvider.addCommit("test1", "1");
    commitListViewProvider.addCommit("test2", "2");
    commitListViewProvider.addCommit("test0", "5");
    commitListViewProvider.addCommit("test3", "3");
    commitListViewProvider.addCommit("dummy", "0");

    let commits: Commit[] = [];
    let found = false;
    treeView.onDidChangeSelection(e => {
        debugLog("hi");
        if (e.selection.length > 0) {
            if (!found) {
                const item = e.selection[0] as Commit;
                //vscode.window.showInformationMessage(`You clicked on commit: ${item.commitMessage}`);
                debugLog(`You clicked on commit: ${item.commitMessage}`);
                // Remove the selected commit from the commits array
                commits = commitListViewProvider.getcommits().filter(c => c.commitMessage !== item.commitMessage);
                commitListViewProvider.clear();
                found = true;
            }
        }
        else {
            commitListViewProvider.loadCommits(commits);
            found = false;
        }
    });*/